// Git : 소스코드의 버전관리 시스템
// 팀이 협업해서 작업할 때 코드의 변경사항 관리 및 추적을 돕는다.

// 1. 버전 관리 시스템 (VCS)
// - 정의 : 소스코드의 변경사항을 기록하고, 다양한 버전의 코드상태를 관리하는 도구
// - 중요성 : 코드이력 추적, 변경 사항 롤백, 여러명이 동시작업 할 수 있게 돕는다.

// 2. Git의 특징
// 분산형 버전관리
// 빠른 성능
// 데이터 무결성

// 3. Git 기본 용어
// 커밋 (Commit) : 특정 시점의 파일 상태를 저장한다. 프로젝트의 스냅샷을 저장 (고유한 해시값)
// 브랜치 (Branch) : 브랜치를 통해서 여러 기능을 동시 개발 가능
// 머지 (Merge) : 브랜치의 변경사항을 통합하는 작업
// 리베이스 (Rebase) : 브랜치의 커밋 이력 -> 다른 브랜치의 최신상태로 재배치
// 풀 (Pull) : 원격 저장소의 변경 사항을 로컬로 가져온다.
// 푸시 (Push) : 로컬 저장소의 커밋을 원격 저장소로 전송한다.

// 4. 작업 흐름
// 클론 (Clone) : 원격 저장소를 로컬 컴퓨터에 복제 -->  git clone <저장소 경로>
// 작업한다. 파일을 추가하거나 삭제, 수정
// 스테이지 (Stage) : 변경된 파일을 커밋 준비 상태로 설정한다. ---> git add <파일명>
// 커밋 (Commit) : 스테이지에 올라간 파일을 커밋해서 저장소에 기록한다. ---> git commit -m "메세지"
// 푸시 (Push) : 로컬 커밋을 원격 저장소에 업로드한다. ---> git push origin <브랜치명>
// 풀 (Pull) : 원격 저장소의 최신 상태를 로컬 저장소에 반영한다. ---> git pull

// 기본 명령어
// git init : 새로운 git 저장소 초기화
// git status : 현재 작업 디렉토리 상태 확인
// git log : 커밋 이력 조회
// git diff : 변경된 파일 차이 확인

// git ----> S/W
// github, gitlab, bitbucket 등등 ----> 플랫폼
